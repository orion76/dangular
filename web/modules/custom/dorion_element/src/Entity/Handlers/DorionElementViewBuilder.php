<?php

namespace Drupal\dorion_element\Entity\Handlers;

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\NestedArray;
use Drupal\config_inspector\ConfigInspectorManager;
use Drupal\Core\Config\Schema\ArrayElement;
use Drupal\Core\Config\Schema\Mapping;
use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityRepositoryInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityViewBuilder;
use Drupal\Core\Language\LanguageManagerInterface;
use Drupal\Core\Theme\Registry;
use Drupal\Core\TypedData\TypedDataInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use function is_bool;
use function is_scalar;


/**
 * Provides a Block view builder.
 */
class DorionElementViewBuilder extends EntityViewBuilder {

  /**
   * The configuration inspector manager.
   *
   * @var \Drupal\config_inspector\ConfigInspectorManager
   */
  protected $configInspectorManager;

  public function __construct(EntityTypeInterface $entity_type,
                              EntityRepositoryInterface $entity_repository,
                              LanguageManagerInterface $language_manager,
                              ConfigInspectorManager $config_inspector_manager
    , Registry $theme_registry = NULL,
                              EntityDisplayRepositoryInterface $entity_display_repository = NULL) {
    parent::__construct($entity_type, $entity_repository, $language_manager, $theme_registry, $entity_display_repository);
    $this->configInspectorManager = $config_inspector_manager;

  }

  /**
   * {@inheritdoc}
   */
  public static function createInstance(ContainerInterface $container, EntityTypeInterface $entity_type) {
    return new static(
      $entity_type,
      $container->get('entity.repository'),
      $container->get('language_manager'),
      $container->get('plugin.manager.config_inspector'),
      $container->get('theme.registry'),
      $container->get('entity_display.repository')

    );
  }

  protected function getBuildDefaults(EntityInterface $entity, $view_mode) {
    $build = parent::getBuildDefaults($entity, $view_mode); // TODO: Change the autogenerated stub
    $fields = [
      ['uuid'],
      ['label'],
      ['children']
    ];
    $build += $this->getTree('dorion_element.entity.' . $entity->id(), $fields);
    return $build;
  }

  /**
   * Tree inspection view of the configuration.
   *
   * @param string $name
   *   Configuration name.
   *
   * @return array
   *   A render array for a tree view.
   */
  public function getTree($name, $fields) {
    $config_schema = $this->configInspectorManager->getConfigSchema($name);
    $output = $this->formatTree($fields, $config_schema);
    $output['#title'] = $this->t('Tree of configuration data for %name', ['%name' => $name]);
    return $output;
  }

  /**
   * Format config schema as a tree.
   *
   * @param array|object $schema
   *   The schema.
   * @param bool $collapsed
   *   (Optional) Indicates whether the details are collapsed by default.
   * @param string $base_key
   *   Prefix used in the description.
   *
   * @return array
   *   The tree in the form of a render array.
   */
  public function formatSchema($schema, $collapsed = FALSE, $base_key = '') {
    $build = [];
    if ($schema instanceof ArrayElement) {
      foreach ($schema as $key => $element) {
        $definition = $element->getDataDefinition();
        $label = $definition['label'] ?: $this->t('N/A');
        $type = $definition['type'];
        $element_key = $base_key . $key;
        $build[$key] = [
            '#type' => 'details',
            '#title' => $label,
            '#description' => $element_key . ' (' . $type . ')',
            '#description_display' => 'after',
            '#open' => !$collapsed,
          ] + $this->formatSchema($element, TRUE, $element_key . '.');
      }
    }
    else {
      $definition = $schema->getDataDefinition();
      $label = $definition['label'] ?: $this->t('N/A');
      $type = $definition['type'];
      $element_key = $base_key;
      $build[] = [
        '#type' => 'item',
        '#title' => $label,
        '#plain_text' => $this->formatValue($schema),
        '#description' => $element_key . ' (' . $type . ')',
        '#description_display' => 'after',
      ];
    }

    return $build;
  }

  /**
   * Format config schema as a tree.
   *
   * @param array|object $schema
   *   The schema.
   * @param bool $collapsed
   *   (Optional) Indicates whether the details are collapsed by default.
   * @param string $base_key
   *   Prefix used in the description.
   *
   * @return array
   *   The tree in the form of a render array.
   */
  public function formatTree($fields, Mapping $schema, $collapsed = FALSE) {
    $build = [];
    foreach ($fields as $parents) {

      $element = $this->getSchemaElement($parents, $schema);
      $key = implode('.', $parents);
      $build[$key] = $this->formatSchema($element, $collapsed, $key);
    }
    return $build;
  }

  protected function getSchemaElement($parents, Mapping $schema) {
    $element = $schema;
    foreach ($parents as $key) {
      $element = $element->get($key);
    }
    return $element;
  }

  /**
   * Formats a value as a string, for readable output.
   *
   * @param \Drupal\Core\TypedData\TypedDataInterface $element
   *   The value element.
   *
   * @return string
   *   The value in string form.
   */
  protected function formatValue(TypedDataInterface $element) {
    $value = $element->getValue();
    if (is_bool($value)) {
      return $value ? 'true' : 'false';
    }
    if (is_scalar($value)) {
      return Html::escape($value);
    }
    if (empty($value)) {
      return '<' . $this->t('empty') . '>';
    }
    return '<' . gettype($value) . '>';
  }

}
